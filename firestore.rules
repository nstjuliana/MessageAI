rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection
    // NOTE: User presence (online/offline/away) is now tracked in Realtime Database
    // See database.rules.json for presence rules
    match /users/{userId} {
      // Anyone authenticated can read any user profile (for search, chat participants, etc.)
      allow read: if isAuthenticated();
      
      // Users can create/update/delete their own profile
      // Special case: allow creating messageai-system user (bot)
      allow create: if isOwner(userId) || 
                       (isAuthenticated() && userId == 'messageai-system');
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    
    // Chats collection
    match /chats/{chatId} {
      // Users can read chats they're a participant in
      allow read: if isAuthenticated() && 
                     request.auth.uid in resource.data.participantIds;
      
      // Users can create chats if they're included as a participant
      allow create: if isAuthenticated() && 
                       request.auth.uid in request.resource.data.participantIds;
      
      // Participants can update chat metadata
      allow update: if isAuthenticated() && 
                       request.auth.uid in resource.data.participantIds;
      
      // Only participants can delete chats
      allow delete: if isAuthenticated() && 
                       request.auth.uid in resource.data.participantIds;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Participants can read messages in their chats
        allow read: if isAuthenticated() && 
                       request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
        
        // Participants can create messages in their chats
        allow create: if isAuthenticated() && 
                         request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
        
        // Message sender can update/delete their own messages
        allow delete: if isAuthenticated() && 
                         request.auth.uid == resource.data.senderId;
        
        // Sender can update their own messages
        // OR participants can update status field only (for delivery/read receipts)
        allow update: if isAuthenticated() && (
          // Sender can update anything
          request.auth.uid == resource.data.senderId ||
          // Participants can only update the status and updatedAt fields
          (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds &&
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']))
        );
      }
      
      // Read receipts subcollection
      match /readReceipts/{userId} {
        // Participants can read all read receipts in their chats
        allow read: if isAuthenticated() && 
                       request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
        
        // Users can only write their own read receipt
        allow write: if isOwner(userId);
      }
      
      // NOTE: Typing indicators have been moved to Realtime Database
      // See database.rules.json for typing indicator rules
    }
    
    // Usernames collection (for username uniqueness enforcement)
    match /usernames/{username} {
      // Anyone authenticated can read usernames (for availability checks)
      allow read: if isAuthenticated();
      
      // Only the user referenced in the document can create/update/delete it
      // This prevents users from reserving usernames for other users
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
                               resource.data.userId == request.auth.uid;
    }
    
    // Deny all other reads/writes by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

